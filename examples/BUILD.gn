import("//webrtc.gni")

group("examples") {
  # This target shall build all targets in examples.
  testonly = true
  deps = []

  if (is_linux || is_win) {
    deps += [
      ":loop_connect",
      ":smoke_test",
    ]
  }
}

if (is_linux || is_win) {
  rtc_executable("smoke_test") {
    visibility = [ "//*", ":*" ]
    testonly = true

    sources = [
      "smoke_test/src/media_test_utils/byte_stream_utils.cpp",
      "smoke_test/src/media_test_utils/byte_stream_utils.h",
      "smoke_test/src/media_test_utils/conn_utils.cpp",
      "smoke_test/src/media_test_utils/conn_utils.h",
      "smoke_test/src/media_test_utils/test_video_capturer.cc",
      "smoke_test/src/media_test_utils/test_video_capturer.h",
      "smoke_test/src/media_test_utils/vcm_capturer.cc",
      "smoke_test/src/media_test_utils/vcm_capturer.h",
      "smoke_test/src/media_test_utils/video_frame_file_writer_bmp.cpp",
      "smoke_test/src/media_test_utils/video_frame_file_writer_bmp.h",
    ]

    sources += [
      "smoke_test/src/camera_capture_test.cpp",
      "smoke_test/src/peer_connection_test.cpp",
      "smoke_test/src/video_codec_test.cpp",
    ]

    sources += [
      "smoke_test/src/main.cpp",
    ]

    public_deps = [
      "//third_party/googletest:gtest",
    ]

    deps = [
      "//:webrtc",
      "//test:video_test_common"
    ]
  }

  rtc_executable("loop_connect") {
    visibility = [ "//*", ":*" ]
    testonly = true
    sources = [
      "loop_connect/src/capture_video_track_source.cpp",
      "loop_connect/src/capture_video_track_source.h",
      "loop_connect/src/loop_call_session.cpp",
      "loop_connect/src/loop_call_session.h",
      "loop_connect/src/main.cpp",
    ]

    deps = [
      "//api:audio_options_api",
      "//api:create_peerconnection_factory",
      "//api:libjingle_peerconnection_api",
      "//api:media_stream_interface",
      "//api:scoped_refptr",
      "//api/audio:audio_mixer_api",
      "//api/audio_codecs:audio_codecs_api",
      "//api/video:video_frame",
      "//api/video:video_rtp_headers",
      "//api/video_codecs:video_codecs_api",
      "//media:rtc_media_base",
      "//p2p:rtc_p2p",
      "//rtc_base:checks",
      "//rtc_base:threading",
      "//rtc_base/third_party/sigslot",
      "//system_wrappers:field_trial",
      "//test:field_trial",
      "//third_party/abseil-cpp/absl/memory",
      "//third_party/abseil-cpp/absl/types:optional",
    ]
    if (is_win) {
      sources += [
      ]
      configs += [ "//build/config/win:windowed" ]
      deps += [
        "../media:rtc_media_base",
        "../rtc_base:win32",
      ]
    }
    if (is_linux) {
      sources += [
        "loop_connect/src/linux/main_wnd.cc",
        "loop_connect/src/linux/main_wnd.h",
      ]
      cflags = [ "-Wno-deprecated-declarations" ]
      libs = [
        "X11",
        "Xcomposite",
        "Xext",
        "Xrender",
      ]
      deps += [ "//build/config/linux/gtk" ]
    }

    deps += [
      "//api:libjingle_peerconnection_api",
      "//api/audio_codecs:builtin_audio_decoder_factory",
      "//api/audio_codecs:builtin_audio_encoder_factory",
      "//api/video:video_frame",
      "//api/video:video_rtp_headers",
      "//api/video_codecs:builtin_video_decoder_factory",
      "//api/video_codecs:builtin_video_encoder_factory",
      "//media:rtc_audio_video",
      "//modules/audio_device",
      "//modules/audio_processing",
      "//modules/audio_processing:api",
      "//modules/video_capture:video_capture_module",
      "//pc:libjingle_peerconnection",
      "//pc:peerconnection",
      "//rtc_base",
      "//rtc_base:rtc_base_approved",
      "//test:video_test_common",
      "//third_party/abseil-cpp/absl/flags:flag",
      "//third_party/abseil-cpp/absl/flags:parse",
      "//third_party/libyuv",
    ]
  }
}