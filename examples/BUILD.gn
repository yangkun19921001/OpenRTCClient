import("//webrtc.gni")

group("examples") {
  # This target shall build all targets in examples.
  testonly = true
  visibility = [ "*" ]
  deps = []

  if (is_linux || is_win || is_mac || is_android) {
    deps += [
      ":smoke_test",
    ]
  }
  if (is_linux || is_win) {
    deps += [
      ":loop_connect",
    ]
  }
}

if (is_linux || is_win || is_mac || is_android) {
  rtc_source_set("test_cases") {
    testonly = true
    visibility = [ "*" ]
    test_base_path = "."
    sources = [
      "$test_base_path/smoke_test/src/camera_capture_test.cpp",
      "$test_base_path/smoke_test/src/crash_catch_test.cpp",
      "$test_base_path/smoke_test/src/peer_connection_test.cpp",
      "$test_base_path/smoke_test/src/video_codec_test.cpp",
    ]

    if (is_mac) {
      configs += [
        "//third_party/breakpad:client_config",
      ]
    }

    include_dirs = [
      "${test_base_path}",
      "${test_base_path}/smoke_test/src",
    ]

    defines = [ "BUILD_ROOT=\"${root_out_dir}\"" ]

    if (is_android) {
      defines += [ "WEBRTC_ANDROID_PLATFORM_BUILD=1" ]
    }

    public_deps = [
      "//:webrtc_lib",
      "//third_party/googletest:gtest",
      "//third_party/protobuf:protobuf_lite",
      "//third_party/breakpad:breakpad_client_lib",
    ]
  }

  rtc_static_library("media_test_static") {
    testonly = true
    visibility = [ "*" ]

    test_base_path = "./smoke_test/src"

    include_dirs = [
      "${test_base_path}",
      "${test_base_path}/smoke_test/src",
    ]

    sources = [
      "$test_base_path/media_test_utils/audio_utils.cpp",
      "$test_base_path/media_test_utils/audio_utils.h",
      "$test_base_path/media_test_utils/byte_stream_utils.cpp",
      "$test_base_path/media_test_utils/byte_stream_utils.h",
      "$test_base_path/media_test_utils/conn_utils.cpp",
      "$test_base_path/media_test_utils/conn_utils.h",
      "$test_base_path/media_test_utils/test_video_capturer.cc",
      "$test_base_path/media_test_utils/test_video_capturer.h",
      "$test_base_path/media_test_utils/vcm_capturer.cc",
      "$test_base_path/media_test_utils/vcm_capturer.h",
      "$test_base_path/media_test_utils/video_frame_file_writer_bmp.cpp",
      "$test_base_path/media_test_utils/video_frame_file_writer_bmp.h",
    ]

    deps = [
      "//:webrtc_lib",
      "//test:video_test_common",
      "//third_party/protobuf:protobuf_lite",
    ]

    absl_deps = [
      "//third_party/abseil-cpp/absl/algorithm:container",
      "//third_party/abseil-cpp/absl/strings",
    ]
  }
  if (is_android) {
    import("//build/config/android/config.gni")
    import("//build/config/android/rules.gni")

    rtc_shared_library("smoke_test") {
      testonly = true

      output_name = "libopen_rtc_instrumentation"

      visibility = [ "*" ]

      include_dirs = [
        ".",
        "smoke_test/src",
        "$target_gen_dir"
      ]

      #test_base_path = "."
      sources = [
        "../webrtc/sdk/android/src/jni/jni_onload.cc",
      ]

      ldflags = [
        "-Wl,--version-script=" + rebase_path("//build/android/android_only_jni_exports.lst")
      ]

      public_deps = [
        "//third_party/googletest:gtest",
        ":media_test_static",
        ":test_cases"
      ]
    }
  } else {
    rtc_executable("smoke_test") {
      testonly = true
      visibility = [ "*" ]
      test_base_path = "."

      include_dirs = [
        "${test_base_path}",
        "${test_base_path}/smoke_test/src",
      ]

      if (is_mac) {
        sources = [
          "$test_base_path/smoke_test/src/main.mm",
        ]
      } else {
        sources = [
          "$test_base_path/smoke_test/src/main.cpp",
        ]
      }
      deps = [
        "//third_party/googletest:gtest",
        ":media_test_static",
        ":test_cases"
      ]

      if (is_mac) {
        frameworks = [
          "Foundation.framework",
          "AVFoundation.framework",
          "CoreMedia.framework",
          "ApplicationServices.framework",
          "AudioToolbox.framework",
          "CoreAudio.framework",
          "CoreGraphics.framework",
          "VideoToolbox.framework",
          "CoreVideo.framework",
          "CoreFoundation.framework",
          "OpenGL.framework",
          "QuartzCore.framework",
          "Cocoa.framework",
          "Metal.framework",
          "MetalKit.framework",
          "AppKit.framework",
        ]
      }
    }
  }

  rtc_executable("loop_connect") {
    visibility = [ "//*", ":*" ]
    testonly = true
    sources = [
      "loop_connect/src/capture_video_track_source.cpp",
      "loop_connect/src/capture_video_track_source.h",
      "loop_connect/src/loop_call_session.cpp",
      "loop_connect/src/loop_call_session.h",
      "loop_connect/src/main.cpp",
    ]

    deps = [
      "//api:audio_options_api",
      "//api:create_peerconnection_factory",
      "//api:libjingle_peerconnection_api",
      "//api:media_stream_interface",
      "//api:scoped_refptr",
      "//api/audio:audio_mixer_api",
      "//api/audio_codecs:audio_codecs_api",
      "//api/video:video_frame",
      "//api/video:video_rtp_headers",
      "//api/video_codecs:video_codecs_api",
      "//media:rtc_media_base",
      "//p2p:rtc_p2p",
      "//rtc_base:checks",
      "//rtc_base:threading",
      "//rtc_base/third_party/sigslot",
      "//system_wrappers:field_trial",
      "//test:field_trial",
      "//third_party/abseil-cpp/absl/memory",
      "//third_party/abseil-cpp/absl/types:optional",
    ]
    if (is_win) {
      sources += [
      ]
      configs += [ "//build/config/win:windowed" ]
      deps += [
        "../media:rtc_media_base",
        "../rtc_base:win32",
      ]
    }
    if (is_linux) {
      sources += [
        "loop_connect/src/linux/main_wnd.cc",
        "loop_connect/src/linux/main_wnd.h",
      ]
      cflags = [ "-Wno-deprecated-declarations" ]
      libs = [
        "X11",
        "Xcomposite",
        "Xext",
        "Xrender",
      ]
      deps += [ "//build/config/linux/gtk" ]
    }

    deps += [
      "//api:libjingle_peerconnection_api",
      "//api/audio_codecs:builtin_audio_decoder_factory",
      "//api/audio_codecs:builtin_audio_encoder_factory",
      "//api/video:video_frame",
      "//api/video:video_rtp_headers",
      "//api/video_codecs:builtin_video_decoder_factory",
      "//api/video_codecs:builtin_video_encoder_factory",
      "//media:rtc_audio_video",
      "//modules/audio_device",
      "//modules/audio_processing",
      "//modules/audio_processing:api",
      "//modules/video_capture:video_capture_module",
      "//pc:libjingle_peerconnection",
      "//pc:peerconnection",
      "//rtc_base",
      "//rtc_base:rtc_base_approved",
      "//test:video_test_common",
      "//third_party/abseil-cpp/absl/flags:flag",
      "//third_party/abseil-cpp/absl/flags:parse",
      "//third_party/libyuv",
    ]
  }
}
